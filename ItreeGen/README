Assignment 6d
CS 521 Spring 2017
Wolf Honore

This ITreeGen along with CG0 or CG6 and RA6 works on all the "test*.tig"
files and almost completely works on merge.tig.

Configuration:
These two values in frame.sml can be used to configure IG to meet certain
assumptions by CG. Set to whatever is appropriate for your module.
- iPush determines whether IG or CG is responsible for putting arguments on
  the stack before a function call.
- localsOffsetNeg decides whether localsOffset in register.sml is a positive
  value that is meant to be interpreted as a negative offset from FP, or a
  negative value.

Assumptions for CodeGen:
- If iPush is true then ITreeGen will create CALL nodes of the form
  CALL(f, [ESEQ(MOVE(tmp1, arg1), CONST 0),
           ESEQ(MOVE(tmp2, arg2), CONST 0),
           ...,
           ESEQ(MOVE(SP+4, arg2), CONST 0),
           ESEQ(MOVE(SP+0, tmp1), CONST 0)])
  The ESEQ is needed because CALL expects a list of exp's so you should ignore
  the second value.
- If iPush is false then ITreeGen will create CALL nodes of the form
  CALL(f, [arg1, arg2, ...]) and you are responsible for moving them to the
  stack.
- ITreeGen will move the result of a function to the RV register.
- CodeGen will handle everything else that has to happen before and after a
  function call or declaration
- The SP register points to the location for the first argument to be pushed,
  SP+4 holds the second, etc.
- If localsOffsetNeg is false then the offset for local variables is given as
  a positive number in registers.sml, but is meant to be interpreted as a
  negative offset from FP. For example, localsBaseOffset = 8 means var 1 is at
  FP-8, var 2 is at FP-12, etc
- If localsOffsetNeg is true then the offset for local variables is a negative
  offset from FP and IG will not negate it
- The offset for parameters of the current function is given as a positive offset
  from FP. paramBaseOffset = 4 means arg1 is at FP+4, etc.

Assumptions for RegAlloc:
I don't think any part of ITreeGen should affect RegAlloc's implementation.
Feel free to ask on Piazza or email me if you think otherwise.

I also included a slightly modified version of printtree.sml that prints
the ITree but with '#' before every line so you can print it in the .s file for
debugging. To use, just add 'val _ = Printtree.printtree (out, body)' in
emitproc in main.sml.
