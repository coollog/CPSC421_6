RegAlloc 6d

Charles Proctor, crp43
04/14/2017

<i> I have implemented and tested a complete version of the RegAlloc module. That includes:

    - makegraph.sml : builds a control flow graph
    - liveness.sml : builds the interference graph
    - liveset.sml : used by liveness.sml to maintain a set of live temporaries
    - regalloc.sml : performs the graph-coloring register allocation (only simplify + select)

I have successfully tested register allocation using IG4 and CG0 on the first several test cases.

<ii> To use my RegAlloc module, copy the four files listed above into RegAlloc/ and update the sources.cm as described in <v>. In main.sml, you'll have to add at least the following lines of code...

```
(* convert assembly instructions to flowgraph and list of nodes *)
val (flowgraph, nodes) = MakeGraph.instrs2graph(instrs)

(* convert flowgraph to interference graph and liveout mapping *)
val (igraph, liveout_mapping) = Liveness.interferenceGraph(flowgraph)

(* graph coloring to allocate registers for all temporaries *)
val allocation = RegAlloc.color{
    interference=igraph,
    initial=initial,
    registers=registers
}
```

where
- instrs is the list of assembly instructions
- initial is a mapping of pre-allocated registers (Register.specialregs)
- registers is the list of registers available (Register.callesaves + Register.callersaves)

and
- liveout_mapping is a mapping from graph nodes to live temporaries
    - liveout_mapping can be used to construct the body for C.procEntryExit()
- allocation is a mapping from temporaries to registers.
    - allocation can be passed directly to C.procEntryExit and for formatting register names.

Should you wish to visualize either the flowgraph or the liveness graph, add to main.sml the following:
```
(* dump control flow graph to fgraph.gv
val _ = withOpenFile "fgraph.gv" (fn (out) => Flow.dot(out, flowgraph))

(* dump interference graph to igraph.gv *)
val _ = withOpenFile "igraph.gv" (fn (out) => Liveness.show(out, igraph))
```

<iii> As before, I assume that there are enough registers for all temporaries... ie, that no spilling is necessary. No other major assumptions come to mind.

<iv> No particular requests.

<v> I added liveset.sml to maintain a LiveSet data structure. The updated sources.cm is in this directory, created by simply adding

    RegAlloc/liveset.sml
